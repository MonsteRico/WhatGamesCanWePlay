import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useSession, signIn, signOut, getSession } from "next-auth/react";
import NavBar from "../components/NavBar";
import { OwnedGame } from "type-steamapi";
import Image from "next/future/image";
import GameCover from "../components/GameCover";
import { UserInstalledGames } from "@prisma/client";
import { Session } from "next-auth";
import LibraryGame from "../components/LibraryGame";
import { LEAGUE_OF_LEGENDS, OVERWATCH, VALORANT } from "../utils/gameConstants";
import { useEffect } from "react";

const Library: NextPage = () => {
	const { data: session } = useSession();
	let text: string = "Hello World";
	let steamId: string = "";

	if (session) {
		text = session?.user?.name as string;
		steamId = session?.user?.steamId as string;
	}

	const mutation = trpc.useMutation(["library.toggleGameInstalled"], {
		onSuccess: () => {
			utils.invalidateQueries("library.getUserInstalledGames");
		},
	});
	const gamesQuery = trpc.useQuery(["library.getSteamGames", { steamId }]);
	const games = gamesQuery?.data?.map((game) => {
		return game as OwnedGame;
	});
	games?.push(LEAGUE_OF_LEGENDS, OVERWATCH, VALORANT);
	const installedGames = trpc.useQuery([
		"library.getUserInstalledGames",
		{ steamId: session?.user?.steamId as string },
	]);
	const utils = trpc.useContext();
	// const game = trpc.useQuery(["library.getGame", { appId: "218620" }]);
	// console.log(game.data);
	// console.log(games.data);

	function toggleInstall(session: Session | null, game: OwnedGame, currentlyInstalled: boolean) {
		mutation.mutate({
			steamId: session?.user?.steamId as string,
			appId: game.appId.toString(),
			currentlyInstalled,
		});
	}

	return (
		<>
			<Head>
				<title>My Library</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<NavBar></NavBar>

			<main className="container mx-auto flex flex-col justify-center items-center min-h-screen p-4">
				{steamId ? (
					<>
						{games ? (
							<>
								<p className="pt-6 text-2xl text-blue-500 w-full">Your steamId {steamId}</p>
								<div id="games" className="grid grid-cols-6 gap-10 w-full">
									{games.map((game: OwnedGame) => {
										const gameInstalled = installedGames.data?.includes(
											game.appId.toString()
										) as boolean;
										// console.log(game.name + " " + gameInstalled);
										return (
											<LibraryGame
												key={game.appId}
												session={session}
												gameInstalled={gameInstalled}
												toggleInstall={toggleInstall}
												game={game}
											></LibraryGame>
										);
									})}
								</div>
							</>
						) : (
							<div>Loading</div>
						)}
					</>
				) : (
					<div>
						<p>You do not have a linked Steam id.</p>
						<p>please link it :)</p>
						{
							// TODO
							// optionally have an option to link a steam account manually
							// also can link to the link steam account page
						}
					</div>
				)}
			</main>
		</>
	);
};

export async function getServerSideProps(context: any) {
	const session = await getSession(context);
	if (!session) {
		return {
			redirect: {
				destination: "/",
				permanent: false,
			},
		};
	}
	return {
		props: {
			session,
		},
	};
}

export default Library;
