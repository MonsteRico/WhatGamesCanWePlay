import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../utils/trpc";
import { useSession, signIn, signOut, getSession } from "next-auth/react";
import NavBar from "../components/NavBar";
import { useRouter } from "next/router";
import UserIcon from "../components/UserIcon";
import CoolButton from "../components/CoolButton";
import { useState } from "react";
import Modal from "../components/Modal";
const Groups: NextPage = () => {
	const { data: session } = useSession();
	let text: string = "Hello World";
	let steamId: string = "";
	const [joinGroupModalOpen, setJoinGroupModalOpen] = useState(false);
	const [createGroupModalOpen, setCreateGroupModalOpen] = useState(false);
	if (session) {
		text = session?.user?.name as string;
		steamId = session?.steamId as string;
	}
	const hello = trpc.useQuery(["hello.world", { text }]);
	const groupsQuery = trpc.useQuery(["groups.getMyGroups"]);
	const groups = groupsQuery.data;
	if (groupsQuery.data) {
		// console.log(groups.data);
	}
	const createGroup = trpc.useMutation(["groups.createGroup"], {
		onSuccess: (data) => {
			router.push(`/groups/${data.id}`);
		},
	});
	const joinGroup = trpc.useMutation(["groups.joinGroup"], {
		onSuccess: (data) => {
			if (data.joinedId === null) {
				window.alert("Group join code is invalid");
			} else {
				router.push("/groups/[groupId]", `/groups/${data.joinedId}`);
			}
		},
	});
	const router = useRouter();
	return (
		<>
			<Head>
				<title>Groups</title>
				<meta name="description" content="Generated by create-t3-app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<NavBar></NavBar>

			<main className="container mx-auto flex flex-col items-center justify-center p-4">
				<h1 className="text-center text-7xl mb-5 px-5 pb-5 font-bold border-violet-500 border-b-4">Groups</h1>
				<p className="text-center text-4xl w-3/4">Create, join, and view groups!</p>
				<p className="text-center text-3xl w-3/4 mb-10">(This is where you&apos;ll need some friends ðŸ˜„)</p>
				<div className="pt-6 text-2xl flex justify-between items-center w-1/4">
					<CoolButton
						onClick={() => {
							setJoinGroupModalOpen(true);
						}}
					>
						Join Group
					</CoolButton>
					<CoolButton
						onClick={() => {
							setCreateGroupModalOpen(true);
						}}
					>
						Create Group
					</CoolButton>
				</div>
				<h1 className="text-5xl border-violet-500 border-b-4 pb-3 px-5 my-20">My Groups</h1>
				<div className="w-full grid grid-cols-2 gap-x-20">
					{groups?.map((group) => (
						<div
							onClick={() => {
								router.push("/groups/" + group.id);
							}}
							key={group.id}
							className="cursor-pointer flex items-center justify-between flex-row rounded-x p-4"
						>
							<div className="flex flex-row items-center">
								<p className="text-4xl">{group.ownerId === session?.user?.id ? "ðŸ‘‘" : "ðŸŽ®"}</p>
								<p className="px-5 text-2xl">{group.name}</p>
							</div>
							<div className="flex flex-row">
								<CoolButton>View</CoolButton>
							</div>
						</div>
					))}
				</div>
				{joinGroupModalOpen ? (
					<Modal setOpenFunction={setJoinGroupModalOpen} title="Join a Group">
						<div className="flex flex-col">
							<label htmlFor="text" className="mb-2 font-semibold text-center">
								Enter Join Code
							</label>
							<input
								type="text"
								id="joinCode"
								className="w-full max-w-lg text-black rounded-lg border-4 border-violet-500 px-2 py-1 focus:outline-none"
							/>
							<div className="mt-5 flex flex-col justify-end items-end">
								<CoolButton
									onClick={() => {
										const joinCodeInput = document.getElementById("joinCode") as HTMLInputElement;
										if (joinCodeInput.value === "") {
											window.alert("Please enter a join code");
										} else {
											joinGroup.mutate({
												joinCode: joinCodeInput.value as string,
												userId: session?.user?.id as string,
											});
											setJoinGroupModalOpen(false);
										}
									}}
								>
									Submit
								</CoolButton>
							</div>
						</div>
					</Modal>
				) : null}
				{createGroupModalOpen ? (
					<Modal setOpenFunction={setCreateGroupModalOpen} title="Create a Group">
						<div className="flex flex-col">
							<label htmlFor="text" className="mb-2 font-semibold text-center">
								Enter Group Name
							</label>
							<input
								type="text"
								id="groupName"
								className="w-full max-w-lg text-black rounded-lg border-4 border-violet-500 px-2 py-1 focus:outline-none"
							/>
							<div className="mt-5 flex flex-col justify-end items-end">
								<CoolButton
									onClick={() => {
										const groupNameInput = document.getElementById("groupName") as HTMLInputElement;
										if (groupNameInput.value === "") {
											window.alert("Please enter a group name");
										} else {
											createGroup.mutate({
												name: groupNameInput.value as string,
												creatorId: session?.user?.id as string,
											});
											setCreateGroupModalOpen(false);
										}
									}}
								>
									Submit
								</CoolButton>
							</div>
						</div>
					</Modal>
				) : null}
			</main>
		</>
	);
};

export async function getServerSideProps(context: any) {
	const session = await getSession(context);
	if (!session) {
		return {
			redirect: {
				destination: "/signin/groups",
				permanent: false,
			},
		};
	}
	return {
		props: {
			session,
		},
	};
}

export default Groups;
