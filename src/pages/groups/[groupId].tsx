import type { NextPage } from "next";
import Head from "next/head";
import { trpc } from "../../utils/trpc";
import { useSession, signIn, signOut, getSession } from "next-auth/react";
import NavBar from "../../components/NavBar";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import GameCover from "../../components/GameCover";
import { UserSelect } from "../../components/UserSelect";
import { DeleteButton } from "../../components/DeleteButton";
import { LeaveButton } from "../../components/LeaveButton";
import CoolButton from "../../components/CoolButton";
import Modal from "../../components/Modal";

const GroupPage: NextPage = () => {
	const { data: session } = useSession();
	let steamId: string = "";
	if (session) {
		steamId = session?.steamId as string;
	}
	const router = useRouter();
	const [enabledUsers, setEnabledUsers] = useState<string[]>([]);
	const { groupId } = router.query as { groupId: string };
	const groupQuery = trpc.useQuery(["groups.getGroup", { groupId }]);
	const group = groupQuery.data;
	const groupMembersQuery = trpc.useQuery(["groups.getMembers", { groupId }]);
	const deleteGroup = trpc.useMutation(["groups.deleteGroup"]);
	const leaveGroup = trpc.useMutation(["groups.leaveGroup"]);
	const usersInstalledGamesQuery = trpc.useQuery(["library.getUsersInstalledGames", { steamIds: enabledUsers }]);
	const groupMembers = groupMembersQuery.data;
	const [disabledUsers, setDisabledUsers] = useState<string[]>([]);
	const [copyText, setCopyText] = useState("Click to copy!");
	const [helpModalOpen, setHelpModalOpen] = useState(false);
	const [randomGame, setRandomGame] = useState<string>("");
	const [randomModalOpen, setRandomModalOpen] = useState(false);

	// set disabledUsers to groupMembersSteamIds on first page load
	useEffect(() => {
		const groupMembersSteamIds: string[] = groupMembers?.map((member) => member?.steamId) as string[];

		setDisabledUsers(groupMembersSteamIds);
	}, [groupMembers]);

	async function copyTextToClipboard(text: string) {
		setCopyText("Copied!");
		if ("clipboard" in navigator) {
			return await navigator.clipboard.writeText(text);
		} else {
			return document.execCommand("copy", true, text);
		}
	}
	if (!groupId || typeof groupId !== "string") {
		return <div>Invalid Group Page</div>;
	}
	if (!groupQuery.data) {
		// TODO add error page
		return <div>Invalid Group Page</div>;
	}
	// check if user is in group
	const isMember = groupMembers?.some((member) => member?.userId === session?.user?.id);
	if (!isMember) {
		return <div>You are not a member of this group.</div>;
	}

	if (group && groupMembers && disabledUsers && enabledUsers) {
		const { ownerId, name, joinCode, id: groupId } = group;

		const isOwner = ownerId === session?.user?.id;
		console.log(group);
		console.log(groupMembers);

		return (
			<>
				<Head>
					<title>Groups</title>
					<meta name="description" content="Generated by create-t3-app" />
					<link rel="icon" href="/favicon.ico" />
				</Head>
				<NavBar></NavBar>

				<main className="container mx-auto flex flex-col items-center justify-center p-4">
					<div className="grid grid-cols-3 gap-10 items-center w-full mb-10">
						<div className="flex justify-start items-start">
							<CoolButton
								onClick={() => {
									setHelpModalOpen(true);
								}}
							>
								Need Help?
							</CoolButton>
						</div>
						<div className="flex flex-col justify-start items-center">
							<h1 className="text-center text-7xl mb-5 px-5 pb-5 font-bold border-violet-500 border-b-4">
								{group.name}
							</h1>
							<p
								className="text-2xl cursor-pointer"
								onClick={() => {
									copyTextToClipboard(joinCode);
								}}
							>
								Join Code: {group.joinCode}
							</p>
							<p
								className="text-gray-500 cursor-pointer"
								onClick={() => {
									copyTextToClipboard(joinCode);
								}}
							>
								{copyText}
							</p>
						</div>
						<div className="flex justify-end items-end">
							<CoolButton
								onClick={() => {
									// TODO group settings
									alert("Editing group settings will come soon!");
								}}
								className="mr-5"
							>
								Group Settings
							</CoolButton>
							{isOwner && groupMembers ? (
								<DeleteButton
									groupId={groupId}
									session={session}
									router={router}
									deleteGroup={deleteGroup}
									length={groupMembers.length}
								></DeleteButton>
							) : (
								<LeaveButton
									groupId={groupId}
									session={session}
									push={router.push}
									ownerId={group.ownerId}
									mutate={leaveGroup.mutate}
								></LeaveButton>
							)}
						</div>
					</div>

					<UserSelect
						enabledUsers={enabledUsers}
						setEnabledUsers={setEnabledUsers}
						usersInstalledGamesQuery={usersInstalledGamesQuery}
						groupMembers={groupMembers}
						disabledUsers={disabledUsers}
						setDisabledUsers={setDisabledUsers}
					></UserSelect>

					<h1 className="text-5xl border-violet-500 border-b-4 px-5">Games You Can Play</h1>

					{usersInstalledGamesQuery.data?.length === 0 ? (
						<div className="text-2xl">
							{enabledUsers.length === 0
								? "Click on the user icons above to mark users as online and check what games they can all play!"
								: "Sorry, you guys don't have any games in common apparently!"}
						</div>
					) : (
						<>
							{enabledUsers.length != 0 ? (
								<CoolButton
									onClick={() => {
										const gamesArray = usersInstalledGamesQuery.data;
										const randomGame = gamesArray[Math.floor(Math.random() * gamesArray.length)];
										setRandomGame(randomGame);
										setRandomModalOpen(true);
									}}
									className="pb-3 mt-5 mb-5"
								>
									Decide For Me!
								</CoolButton>
							) : null}
							<div id="games" className="grid items-center grid-cols-6 gap-10 w-full">
								{usersInstalledGamesQuery.data?.map((appId: string) => {
									return (
										<GameCover
											appId={appId}
											installed={true}
											key={appId}
											alt={appId + " Game Cover"}
										></GameCover>
									);
								})}
							</div>
						</>
					)}
				</main>
				{helpModalOpen ? (
					<Modal setOpenFunction={setHelpModalOpen} title="Help">
						<div className="flex flex-col">
							<p>
								First, invite your friends to the group. Copy the join code and send it to your friends.
								Have them log into the website, go to Groups, and join a group with your join code. Once
								you have friends in the group, click on a few user&apos;s icons to move them over to the
								&quot;Online&quot; side. It will then show what games all those users have in common!
							</p>
							<div className="mt-5 flex flex-col justify-end items-end">
								<CoolButton
									onClick={() => {
										setHelpModalOpen(false);
									}}
								>
									Close
								</CoolButton>
							</div>
						</div>
					</Modal>
				) : null}
				{randomModalOpen ? (
					<Modal setOpenFunction={setRandomModalOpen} title="Random Game">
						<div className="flex flex-col">
							<h1>Here you go!</h1>
							<div
								className="grid items-center grid-cols-1 items-center p-4 text-center gap-10 w-full flex"
								style={{
									display: "flex",
									justifyContent: "center",
								}}
							>
								<GameCover
									className="justify-center items-center text-center"
									appId={randomGame}
									installed={true}
									key={randomGame}
									alt={randomGame + " Game Cover"}
								></GameCover>
							</div>
							<div className="mt-5 flex flex-col justify-end items-end">
								<CoolButton
									onClick={() => {
										setRandomModalOpen(false);
									}}
								>
									Close
								</CoolButton>
							</div>
						</div>
					</Modal>
				) : null}
			</>
		);
	}

	return <div>Loading</div>;
};

export async function getServerSideProps(context: any) {
	const session = await getSession(context);
	if (!session) {
		return {
			redirect: {
				destination: "/signin/groups-" + context.query.groupId,
				permanent: false,
			},
		};
	}
	return {
		props: {
			session,
		},
	};
}

export default GroupPage;
